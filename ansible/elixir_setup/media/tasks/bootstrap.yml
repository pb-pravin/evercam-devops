# - name: Checkout new version of Elixir server
#   local_action:
#     command
#     chdir={{local_media_dir}}
#     git checkout {{version_to_deploy}}

- name: Build new version of Elixir server
  local_action:
    shell
    chdir={{local_media_dir}}
    {{mix_env_vars}} {{media_env_vars}} mix do deps.get, release

- name: Check new version of Elixir server
  local_action:
    shell
    cat {{local_media_dir}}/rel/evercam_media/releases/start_erl.data | awk '{print $2}'
  register: new_media_version

- name: Ensure there is a directory for the new version
  file: path="{{remote_media_dir}}" state=directory

- name: Copy the release to the production server
  unarchive:
    src="{{local_media_dir}}/rel/evercam_media/evercam_media-{{new_media_version.stdout}}.tar.gz"
    dest="{{remote_media_dir}}"

- name: Check if motion detection file exists
  local_action:
    stat
    path="{{local_media_dir}}/priv_dir/lib_elixir_motiondetection.so"
  register: motion_detection_file

- name: Ensure priv_dir exists
  file: path="{{remote_media_dir}}/priv_dir" state=directory
  when: motion_detection_file.stat.exists == True

- name: Upload motion detecion file
  copy:
    owner: "{{user_name}}"
    group: "{{user_name}}"
    src: "{{local_media_dir}}/priv_dir/lib_elixir_motiondetection.so"
    dest: "{{remote_media_dir}}/priv_dir/lib_elixir_motiondetection.so"
  when: motion_detection_file.stat.exists == True

- name: Ensure /usr/local/bin dir exists
  file: path=/usr/local/bin state=directory
  sudo: yes

- name: Copy evercam_media run init script
  sudo: yes
  template:
    src: run_evercam_media.sh.j2
    dest: /usr/local/bin/run_evercam_media.sh
    owner: root
    group: root
    mode: 0755

- name: Install the evercam_media init script
  sudo: yes
  template:
    src: evercam_media.conf.j2
    dest: /etc/init/evercam_media.conf
    owner: root
    group: root
    mode: 0755

- name: Start production server
  shell: sudo start evercam_media
  failed_when: False
